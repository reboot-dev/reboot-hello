########################################################################
# To expand flags or positional arguments for a specific subcommand    #
# you can include a line such as:                                      #
#                                                                      #
# subcommand --flag1 --flag2=value argument                            #
#                                                                      #
# You can also include one flag or argument per line:                  #
#                                                                      #
# subcommand --flag1                                                   #
# subcommand --flag2=value                                             #
# subcommand argument                                                  #
#                                                                      #
# To only expand flags or arguments if a specific config is used with  #
# a subcommand include lines that include 'subcommand:config', for     #
# example:                                                             #
#                                                                      #
# subcommand:use-foo --flag3=foo                                       #
#                                                                      #
# Then you can expand that config on the command line via:             #
#                                                                      #
# rbt subcommand --config=use-foo`                                     #
########################################################################

# Find '.proto' files in 'api/'.
protoc api/

# Put boilerplate files in 'boilerplate/'.
protoc --boilerplate=boilerplate/

# Tell `rbt` where to output its generated files.
# The paths are different for backend and frontend code.
protoc --python=backend/api/
protoc --react=web/src/api
protoc --web=web/src/api

# Watch if any generated or source files are modified.
dev run --watch=backend/api/**/*.py
dev run --watch=backend/src/**/*.py

# Tell `rbt` that this is a Python application.
dev run --python

# Set the application name for commands that require it.
cloud up --name=hello
cloud down --name=hello
dev expunge --name=hello
dev run --name=hello
serve run --name=hello

# Run the application!
dev run --application=backend/src/main.py

# Tell `rbt serve` that this is a Python application.
serve run --python

# The number of partitions of our data to create. Each partition runs as a
# separate process, and so increasing the partition count requires more cores,
# but also increases the number of concurrent requests that can be served.
serve run --partitions=4

# Leave TLS termination to the external load balancer; expose a non-SSL port to
# that loadbalancer.
serve run --tls=external

# Run the application!
serve run --application=backend/src/main.py

cloud logs --name=hello
