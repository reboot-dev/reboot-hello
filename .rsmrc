########################################################################
# To expand flags or positional arguments for a specific subcommand    #
# you can include a line such as:                                      #
#                                                                      #
# subcommand --flag1 --flag2=value argument                            #
#                                                                      #
# You can also include one flag or argument per line:                  #
#                                                                      #
# subcommand --flag1                                                   #
# subcommand --flag2=value                                             #
# subcommand argument                                                  #
#                                                                      #
# To only expand flags or arguments if a specific config is used with  #
# a subcommand include lines that include 'subcommand:config', for     #
# example:                                                             #
#                                                                      #
# subcommand:use-foo --flag3=foo                                       #
#                                                                      #
# Then you can expand that config on the command line via:             #
#                                                                      #
# rsm subcommand --config=use-foo`                                     #
########################################################################

# We'll run all of the examples assuming the directory of this
# `.rsmrc` as the working directory so that any paths that we specify
# below are relative to it.
protoc --working-directory=.
dev --working-directory=.

# Generate code from our '.proto' files in 'api/'.
protoc --output-directory=api/

# Find '.proto' files in 'api/'.
protoc api/

# Watch if any generated files are modified.
dev --watch=api/**/*.py

# Watch if any of our source files are modified.
dev --watch=backend/src/**/*.py

# PYTHONPATH must be explicitly set to pick up generated code.
dev --env=PYTHONPATH=api/

# Tell `rsm` that this is a Python application.
dev --python

# Save state between chaos restarts.
dev --name=hello-world

# Run the application!
dev backend/src/main.py

# We run 'npm install/start' in the background but we still want the
# output printed to the terminal. Unfortunatley, to get 'npm' to _not_
# clear the terminal we need to pipe it's output to 'cat' which makes
# it think it doesn't have a tty while simultaneously telling it to
# print in color if we actually do have a tty. See
# https://github.com/facebook/create-react-app/issues/2495.
dev:run-npm --background-command='cd web; npm install && if [ -t 1 ]; then export FORCE_COLOR=true; fi; npm start | cat'
